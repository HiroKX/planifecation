// Est laissé dans un premier temps, thème généré via https://callstack.github.io/react-native-paper/docs/guides/theming/#creating-dynamic-theme-colors
// Tentative de toucher au thème manuellement pour mieux correspondre à notre envie initiale


import { MD3LightTheme, MD3DarkTheme, MD3Theme } from 'react-native-paper';

export const lightTheme: MD3Theme = {
  ...MD3LightTheme,
  colors: {
      primary : "rgb(0, 101, 143)",
      onPrimary: "rgb(255, 255, 255)",
      primaryContainer: "rgb(200, 230, 255)",
      onPrimaryContainer: "rgb(0, 30, 46)",
      secondary: "rgb(89, 84, 168)",
      onSecondary: "rgb(255, 255, 255)",
      secondaryContainer: "rgb(227, 223, 255)",
      onSecondaryContainer: "rgb(19, 4, 99)",
      tertiary: "rgb(79, 103, 0)",
      onTertiary: "rgb(255, 255, 255)",
      tertiaryContainer: "rgb(201, 241, 94)",
      onTertiaryContainer: "rgb(22, 31, 0)",
      error: "rgb(186, 26, 26)",
      onError: "rgb(255, 255, 255)",
      errorContainer: "rgb(255, 218, 214)",
      onErrorContainer: "rgb(65, 0, 2)",
      background: "rgb(252, 252, 255)",
      onBackground: "rgb(25, 28, 30)",
      surface: "rgb(252, 252, 255)",
      onSurface: "rgb(25, 28, 30)",
      surfaceVariant: "rgb(221, 227, 234)",
      onSurfaceVariant: "rgb(65, 72, 77)",
      outline: "rgb(113, 120, 126)",
      outlineVariant: "rgb(193, 199, 206)",
      shadow: "rgb(0, 0, 0)",
      scrim: "rgb(0, 0, 0)",
      inverseSurface: "rgb(46, 49, 51)",
      inverseOnSurface: "rgb(240, 240, 243)",
      inversePrimary: "rgb(135, 206, 255)",
      elevation: {
        level0: "transparent",
        level1: "rgb(239, 244, 249)",
        level2: "rgb(232, 240, 246)",
        level3: "rgb(224, 235, 243)",
        level4: "rgb(222, 234, 242)",
        level5: "rgb(217, 231, 239)"
      },
      surfaceDisabled: "rgba(25, 28, 30, 0.12)",
      onSurfaceDisabled: "rgba(25, 28, 30, 0.38)",
      backdrop: "rgba(43, 49, 54, 0.4)"
  }
}

export const darkTheme: MD3Theme = {
  ...MD3DarkTheme,
  colors: {
    primary: "rgb(135, 206, 255)",
    onPrimary: "rgb(0, 52, 77)",
    primaryContainer: "rgb(0, 76, 109)",
    onPrimaryContainer: "rgb(200, 230, 255)",
    secondary: "rgb(196, 192, 255)",
    onSecondary: "rgb(42, 35, 119)",
    secondaryContainer: "rgb(65, 59, 142)",
    onSecondaryContainer: "rgb(227, 223, 255)",
    tertiary: "rgb(174, 212, 68)",
    onTertiary: "rgb(39, 53, 0)",
    tertiaryContainer: "rgb(58, 77, 0)",
    onTertiaryContainer: "rgb(201, 241, 94)",
    error: "rgb(255, 180, 171)",
    onError: "rgb(105, 0, 5)",
    errorContainer: "rgb(147, 0, 10)",
    onErrorContainer: "rgb(255, 180, 171)",
    background: "rgb(25, 28, 30)",
    onBackground: "rgb(226, 226, 229)",
    surface: "rgb(25, 28, 30)",
    onSurface: "rgb(226, 226, 229)",
    surfaceVariant: "rgb(65, 72, 77)",
    onSurfaceVariant: "rgb(193, 199, 206)",
    outline: "rgb(139, 145, 152)",
    outlineVariant: "rgb(65, 72, 77)",
    shadow: "rgb(0, 0, 0)",
    scrim: "rgb(0, 0, 0)",
    inverseSurface: "rgb(226, 226, 229)",
    inverseOnSurface: "rgb(46, 49, 51)",
    inversePrimary: "rgb(0, 101, 143)",
    elevation: {
      level0: "transparent",
      level1: "rgb(31, 37, 41)",
      level2: "rgb(34, 42, 48)",
      level3: "rgb(37, 48, 55)",
      level4: "rgb(38, 49, 57)",
      level5: "rgb(40, 53, 62)"
    },
    surfaceDisabled: "rgba(226, 226, 229, 0.12)",
    onSurfaceDisabled: "rgba(226, 226, 229, 0.38)",
    backdrop: "rgba(43, 49, 54, 0.4)"
  }
}
